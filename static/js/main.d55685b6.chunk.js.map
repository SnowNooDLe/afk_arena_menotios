{"version":3,"sources":["utils/History.js","components/NavBar.js","views/Home.js","views/Abyssal.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","MainNav","Nav","className","navbar","NavLink","tag","RouterNavLink","to","exact","activeClassName","NavBar","Navbar","color","light","expand","bg","NavbarBrand","Link","Home","Abyssal","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTACeA,c,+BCKTC,G,MAAU,WACd,OACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUC,QAAM,GAC7B,kBAACC,EAAA,EAAD,CACEC,IAAKC,IACLC,GAAG,IACHC,OAAK,EACLC,gBAAgB,4BAJlB,QAQA,kBAACL,EAAA,EAAD,CACEC,IAAKC,IACLC,GAAG,WACHC,OAAK,EACLC,gBAAgB,4BAJlB,+BAyBSC,EAdA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,KAAKC,GAAG,QACzC,yBAAKb,UAAU,6BACb,kBAACc,EAAA,EAAD,CAAaX,IAAKY,IAAMV,GAAI,KAA5B,YAIA,kBAAC,EAAD,SCtBOW,EAZF,WACX,OACE,kBAAC,WAAD,KACE,8DACA,4BACE,gHACA,4GCEOC,EARC,WACd,OACE,kBAAC,WAAD,KACE,yCCsBSC,MAjBf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKnB,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,mBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,IAAId,OAAK,EAACe,UAAWL,IAEjC,kBAAC,IAAD,CAAOI,KAAK,WAAWd,OAAK,EAACe,UAAWJ,SCPhCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d55685b6.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();","import React from \"react\";\r\nimport { Navbar, Nav, NavLink, NavbarBrand } from \"reactstrap\";\r\nimport { NavLink as RouterNavLink, Link } from \"react-router-dom\";\r\n\r\nimport \"assets/style/NavBar.css\";\r\n\r\nconst MainNav = () => {\r\n  return (\r\n    <Nav className=\"mr-auto\" navbar>\r\n      <NavLink\r\n        tag={RouterNavLink}\r\n        to=\"/\"\r\n        exact\r\n        activeClassName=\"router-link-exact-active\"\r\n      >\r\n        Home\r\n      </NavLink>\r\n      <NavLink\r\n        tag={RouterNavLink}\r\n        to=\"/Abyssal\"\r\n        exact\r\n        activeClassName=\"router-link-exact-active\"\r\n      >\r\n        파티원정\r\n      </NavLink>\r\n    </Nav>\r\n  );\r\n};\r\nconst NavBar = () => {\r\n  return (\r\n    <Navbar color=\"light\" light expand=\"md\" bg=\"dark\">\r\n      <div className=\"container-fluid max-width\">\r\n        <NavbarBrand tag={Link} to={\"/\"}>\r\n          Menotios\r\n        </NavbarBrand>\r\n\r\n        <MainNav />\r\n      </div>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Fragment>\r\n      <h1>환영합니다</h1>\r\n      <ul>\r\n        <li>일요일 기준 포인트 500 미만 추방</li>\r\n        <li>미접 사유 X 3일 / 사유 O 7일 추방</li>\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;","import React, { Fragment } from \"react\";\r\n\r\nconst Abyssal = () => {\r\n  return (\r\n    <Fragment>\r\n      <h1>Abyssal</h1>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Abyssal;","import React from \"react\";\nimport { HashRouter,Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport History from \"utils/History\";\nimport NavBar from \"components/NavBar\";\n\nimport Home from \"views/Home\";\nimport Abyssal from \"views/Abyssal\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <NavBar />\n        <div className=\"container-fluid\">\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n\n            <Route path=\"/abyssal\" exact component={Abyssal} />\n          </Switch>\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Bootstrap\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}