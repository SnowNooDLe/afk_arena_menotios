{"version":3,"sources":["assets/images/guide_1.jpg","assets/images/guide_2.jpg","assets/images/abyssal_guide.png","assets/images/guide_3.jpg","components/NavBar.js","views/Home.js","views/Abyssal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","useState","isOpen","setIsOpen","Navbar","color","light","expand","bg","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","NavbarText","Home","scrollToRef","ref","window","scrollTo","current","offsetTop","Abyssal","rule","useRef","route","recChar","guideCASUALS","scrollToTop","class","type","id","src","map","href","startChar1","style","fontWeight","startChar2","casualsGuide","App","basename","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.95c2675f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/guide_1.f8a57824.jpg\";","module.exports = __webpack_public_path__ + \"static/media/guide_2.e84a0724.jpg\";","module.exports = __webpack_public_path__ + \"static/media/abyssal_guide.672f0394.png\";","module.exports = __webpack_public_path__ + \"static/media/guide_3.83b034c9.jpg\";","import React, { useState } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  NavbarText,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n  return (\r\n    <Navbar color=\"light\" light expand=\"md\" bg=\"dark\">\r\n      <NavbarBrand tag={Link} to={\"/\"}>\r\n        Menotios\r\n      </NavbarBrand>\r\n\r\n      <NavbarToggler onClick={toggle} />\r\n      <Collapse isOpen={isOpen} navbar>\r\n        <Nav className=\"mr-auto\" navbar>\r\n          <NavItem>\r\n            <NavLink tag={Link} to={\"/abyssal\"}>\r\n              파티원정\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n        <NavbarText>SnowNooDLe</NavbarText>\r\n      </Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4\">환영합니다</h1>\r\n          <p className=\"lead\">\r\n            파티원정 기간동안 시험운영 하고 정보공유를 이쪽에서 해보도록도\r\n            하겠습니다\r\n          </p>\r\n          <p>\r\n            <Link to=\"/abyssal\">파티원정 정보</Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1>길드 룰</h1>\r\n        <ul>\r\n          <li>일요일 기준 포인트 500 미만 추방</li>\r\n          <li>미접 사유 X 3일 / 사유 O 7일 추방</li>\r\n        </ul>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Fragment, useRef } from \"react\";\r\n\r\nimport startChar1 from \"assets/images/guide_1.jpg\";\r\nimport startChar2 from \"assets/images/guide_2.jpg\";\r\nimport casualsGuide from \"assets/images/abyssal_guide.png\";\r\nimport map from \"assets/images/guide_3.jpg\";\r\n\r\nimport \"assets/style/Abyssal.css\";\r\n\r\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop);\r\n\r\nconst Abyssal = () => {\r\n  // Basic Rule\r\n  const rule = useRef(null);\r\n  const scrollToRule = () => scrollToRef(rule);\r\n\r\n  // Route\r\n  const route = useRef(null);\r\n  const scrollToRoute = () => scrollToRef(route);\r\n\r\n  // Recommended Char\r\n  const recChar = useRef(null);\r\n  const scrollToChar = () => scrollToRef(recChar);\r\n\r\n  // Recommended CASUALS guide\r\n  const guideCASUALS = useRef(null);\r\n  const scrollToCASUALS = () => scrollToRef(guideCASUALS);\r\n\r\n  const scrollToTop = () => window.scrollTo(0, 0);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4\">파티원정</h1>\r\n\r\n          <div class=\"col-md-12\">\r\n            <div className=\"btn-group\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-secondary\"\r\n                onClick={scrollToRule}\r\n              >\r\n                기본적인 룰\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-secondary\"\r\n                onClick={scrollToRoute}\r\n              >\r\n                공략 루트\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-secondary\"\r\n                onClick={scrollToChar}\r\n              >\r\n                캐릭터 추천\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-secondary\"\r\n                onClick={scrollToCASUALS}\r\n              >\r\n                CASUALS 추천\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div id=\"section1\" className=\"container\">\r\n        <div className=\"basic-rule\" ref={rule}>\r\n          <h1>기본적인 룰</h1>\r\n          <ol>\r\n            <li>\r\n              공터 최소 3개 유지\r\n              <ul>\r\n                <li>길이 끊기는 것을 방지하기 위해 최소한 공터 3개 유지</li>\r\n              </ul>\r\n            </li>\r\n\r\n            <li>\r\n              다른 사람이 잇고 있는 공터와 인접한 영지는 확인 (공지방 또는\r\n              인게임챗) 뒤 공격\r\n              <ul>\r\n                <li>\r\n                  공지방 - @ 사용하여 태그하지 않으시면, 알람 꺼두신분이면\r\n                  알람이 가지 않습니다.\r\n                </li>\r\n                <li>\r\n                  게임챗 - 작업여부 확인하시고 답이 5분 정도 없거나 드셔도\r\n                  된다는 답변 받으시면 공격\r\n                </li>\r\n                <li>\r\n                  지난 원정 하신분들을 아시겠지만, 파티원정 전용 인게임 챗\r\n                  그룹이 생성됩니다.\r\n                </li>\r\n              </ul>\r\n            </li>\r\n\r\n            <li>\r\n              피 빼주기 금지\r\n              <ul>\r\n                <li>\r\n                  모든 수단을 동원하여 적 진영 중 한 팀을 깰 능력이 있는\r\n                  경우/후반부 백작~친왕 못다신 분들을 위한 도움 제외하고 피\r\n                  빼주기 요청 금지\r\n                </li>\r\n              </ul>\r\n            </li>\r\n          </ol>\r\n          <button type=\"button\" class=\"btn btn-success\" onClick={scrollToTop}>\r\n            페이지 맨 위로\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <div className=\"map\" ref={route}>\r\n          <h2>현재 플랜입니다.</h2>\r\n          <h3 className=\"black-line\">\r\n            검정라인 - 시작후 본인 위치에 따라, A5 또는 A12 로 모여주시기\r\n            바랍니다.\r\n          </h3>\r\n          <h3 className=\"red-line\">\r\n            빨간라인 - 외각 보스 처치 후 A5 이셨던 분들은 B2, A12 이셨던 분들은\r\n            B4 로 모여주시기 바랍니다.\r\n          </h3>\r\n          <h3 className=\"orange-line\">\r\n            주황라인 - 외각 보스 처치 후 주황 라인을 따라 파밍 하세요 (공터 3개\r\n            이상 룰 꼭 지켜 주시구요.)\r\n          </h3>\r\n          <h3 className=\"green-line\">\r\n            초록라인 - 마지막 보스 전은 둘중 하나만 치겠습니다\r\n          </h3>\r\n\r\n          <img src={map} />\r\n\r\n          <button type=\"button\" class=\"btn btn-success\" onClick={scrollToTop}>\r\n            페이지 맨 위로\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <div className=\"recommended-start\" ref={recChar}>\r\n          <h1>\r\n            추천 시작 캐릭터{\" \"}\r\n            <a href=\"https://gall.dcinside.com/mgallery/board/view/?id=afk&no=483978\">\r\n              참고\r\n            </a>\r\n          </h1>\r\n          <h2>\r\n            정해진 룰은 없습니다만, 엔진 + 서포터 + 레인저 가 이로저로\r\n            정신건강에 이로울거 같습니다.\r\n          </h2>\r\n          <h3>엔진 + 서포터</h3>\r\n          <img src={startChar1} />\r\n          <p>\r\n            핵심:{\" \"}\r\n            <span style={{ fontWeight: \"bold\" }}>\r\n              로완, 쌍둥이, 탈렌, 에이츠\r\n            </span>\r\n          </p>\r\n          <p>\r\n            중요: <span style={{ fontWeight: \"bold\" }}>로젤린, 타시</span>\r\n          </p>\r\n          <h3>레인저</h3>\r\n          <img src={startChar2} />\r\n          <p>\r\n            핵심:{\" \"}\r\n            <span style={{ fontWeight: \"bold\" }}>\r\n              에이론, 라이카, 페라엘, 아탈리아, 세실리아, 귀네스\r\n            </span>\r\n          </p>\r\n          <p>\r\n            중요:{\" \"}\r\n            <span style={{ fontWeight: \"bold\" }}>\r\n              타이더스, 나코루루, 켈투르, 탕구리(보스)\r\n            </span>\r\n          </p>\r\n          <button type=\"button\" class=\"btn btn-success\" onClick={scrollToTop}>\r\n            페이지 맨 위로\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <div className=\"casual-info\" ref={guideCASUALS}>\r\n          <h2>\r\n            <a href=\"https://www.reddit.com/r/afkarena/comments/j36xzf/visual_guide_to_pushing_abyssal_expedition_ft/\">\r\n              Visual Guide to Pushing Abyssal Expedition (ft. CASUALS)\r\n            </a>\r\n          </h2>\r\n\r\n          <img src={casualsGuide} />\r\n          <button type=\"button\" class=\"btn btn-success\" onClick={scrollToTop}>\r\n            페이지 맨 위로\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Abyssal;\r\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport NavBar from \"components/NavBar\";\n\nimport Home from \"views/Home\";\nimport Abyssal from \"views/Abyssal\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <NavBar />\n        <div className=\"container-fluid\">\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n\n            <Route path=\"/abyssal\" exact component={Abyssal} />\n          </Switch>\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Bootstrap\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}